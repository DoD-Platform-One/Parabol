{{- if .Values.services.parabol.ffInsights }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: ff-insights
data:
  ff-insights.py: |
    import os
    import requests
    import json

    # Variables to be passed in
    url = os.getenv('ffGqlEndpoint')
    bearer_token = "Bearer " + os.getenv('ffInsightsToken')
    emails = [f"os.getenv('ffInsightsEmails')"]
    domain = os.getenv('ffInsightsDomain')

    # Headers
    headers = {
        "accept": "*/*",
        "content-type": "application/json",
        "x-application-authorization": bearer_token
    }

    # Body for the first request
    mutation_insights = json.dumps({
        "query": "mutation insights{\n  updateFeatureFlag(emails:[\"" + '", "'.join(emails) + "\"], flag: insights, addFlag: true) {\n    error {\n      message\n    }\n    users {\n      id\n      email\n    }\n  }\n}",
        "isPrivate": True
    })

    # Body for the second request
    mutation_toggleAllowInsights = json.dumps({
        "query": "mutation toggleAllowInsights{\n  toggleAllowInsights(suggestedTier: enterprise, domain:\"" + domain + "\", emails:[\"" + '", "'.join(emails) + "\"]) {\n    __typename\n    ... on ToggleAllowInsightsSuccess {\n      organizationUsersAffected\n    }\n  }\n}",
        "isPrivate": True
    })

    # Making the first POST request
    response_insights = requests.post(url, headers=headers, data=mutation_insights)
    print(response_insights.json())

    # Making the second POST request
    response_toggleAllowInsights = requests.post(url, headers=headers, data=mutation_toggleAllowInsights)
    print(response_toggleAllowInsights.json())

---

apiVersion: batch/v1
kind: Job
metadata:
  name: python-job-ff-insights
spec:
  completions: 1
  parallelism: 1
  backoffLimit: 4
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: python-container
        image: registry1.dso.mil/ironbank/opensource/python/python-pipenv/python39-pipenv:2023.10.24
        command: ["/bin/bash","-c"]
        args:
          - echo "Waiting for Parabol sleeping 120 seconds. Usage stats/insights enabled feature flag will be enabled in 2 minutes." &&
            sleep 120 &&
            pip3 install requests &&
            python /scripts/ff-insights.py &&
            echo "Usage stats/insights enabled"
        env:
        - name: ffGqlEndpoint
          value: "{{ .Values.services.parabol.ffGqlEndpoint }}"
        - name: ffInsightsToken
          value: "{{ .Values.services.parabol.ffInsightsToken }}"
        - name: ffInsightsEmails
          value: "{{ .Values.services.parabol.rethinkffInsightsEmailsDb }}"
        - name: ffInsightsDomain
          value: "{{ .Values.services.parabol.ffInsightsDomain }}"
        volumeMounts:
        - name: script-volume-ff-insights
          mountPath: /scripts
          readOnly: true
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: script-volume-ff-insights
        configMap:
          name: ff-insights
      restartPolicy: Never
  {{ end }}