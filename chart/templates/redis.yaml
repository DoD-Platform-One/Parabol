{{- if .Values.services.redis.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  replicas: 1
  serviceName: redis
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
      annotations:
        {{- with .Values.services.redis.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.monitoring.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        {{- end }}
    spec:
      securityContext:
        fsGroup: {{ .Values.services.redis.fsGroup }}
      containers:
      - name: redis
        image: "{{ .Values.global.imageRegistry.host }}/{{ .Values.services.redis.image }}"
        command:
          - redis-server
          - "/redis-master/redis.conf"
        env:
          - name: MASTER
            value: "true"
        securityContext:
          runAsUser: {{ .Values.services.redis.runAsUser }}
          runAsGroup: {{ .Values.services.redis.runAsGroup }}
          runAsNonRoot: {{ .Values.services.redis.runAsNonRoot }}
          allowPrivilegeEscalation: {{ .Values.services.redis.allowPrivilegeEscalation }}
        ports:
          - containerPort: 6379
            name: redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
          - name: data
            mountPath: /data
          - name: config
            mountPath: /redis-master/redis.conf
            readOnly: true
            subPath: redis.conf
      {{- if .Values.monitoring.enabled }}
      - name: redis-exporter
        image: "{{ .Values.global.imageRegistry.host }}/{{ .Values.services.redis.exporter }}"
        securityContext:
          runAsUser: {{ .Values.services.redis.runAsUser }}
          runAsGroup: {{ .Values.services.redis.runAsGroup }}
          runAsNonRoot: {{ .Values.services.redis.runAsNonRoot }}
          allowPrivilegeEscalation: {{ .Values.services.redis.allowPrivilegeEscalation }}
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
          - containerPort: {{ .Values.monitoring.redis.metricsPort }}
            name: metrics
      {{ end }}
      {{- with .Values.global.imageRegistry.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.redis.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.redis.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.redis.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: data
        emptyDir: {}
      - name: config
        configMap:
          defaultMode: 420
          name: redis-config
          items:
          - key: redis-config
            path: redis.conf
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  annotations:
  labels:
    app.kubernetes.io/part-of: parabol
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  {{- if .Values.monitoring.enabled }}
  - name: metrics
    port: {{ .Values.monitoring.redis.metricsPort }}
    targetPort: {{ .Values.monitoring.redis.metricsPort }}
  {{ end }}
  selector:
    app: redis
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis-config: |
    protected-mode no
    bind 0.0.0.0
    appendonly no
    save ""
    dir /data
{{ end }}
