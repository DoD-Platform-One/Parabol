{{- if .Values.services.chronos.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: parabol-chronos
spec:
  replicas: {{ .Values.services.chronos.replicas }}
  strategy:
    type: "RollingUpdate"
  selector:
    matchLabels:
      app.kubernetes.io/component: chronos
      app.kubernetes.io/name: parabol
  template:    
    metadata:
      annotations:
        {{- with .Values.services.chronos.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/component: chronos
        app.kubernetes.io/name: parabol  
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch" 
      containers:
      - name: parabol
        command: ["/bin/sh"]
        args: ["-c", "sleep 10s && export SERVER_ID=`./ip-to-server_id/index.js $(POD_IP)` && node ./dist/chronos.js"]
        image: "{{ .Values.global.imageRegistry.host }}/{{ .Values.services.chronos.image }}"
        env:
          - name: FILE_STORE_PROVIDER
            value: "{{ .Values.parabolDeployment.env.fileStoreProvider }}"
          - name: CDN_BASE_URL
            value: "{{ .Values.parabolDeployment.env.cdnBaseUrl }}"    
          - name: PORT
            value: "{{ .Values.parabolDeployment.env.port }}"
          - name: POSTGRES_DB
            value: "{{ .Values.database.env.postgresDb }}"
          - name: POSTGRES_USER
            value: "{{ .Values.database.env.postgresUser }}"
          - name: POSTGRES_HOST
            value: "{{ .Values.database.env.postgresHost }}"
          - name: POSTGRES_PORT
            value: "{{ .Values.database.env.postgresPort }}"
          - name: POSTGRES_PASSWORD
            value: "{{ .Values.database.env.postgresPassword }}"
          - name: REDIS_URL
            value: "{{ .Values.parabolDeployment.env.redisUrl }}"
          - name: RETHINKDB_URL
            value: "{{ .Values.parabolDeployment.env.rethinkdbUrl }}"
          - name: HOST
            value: "{{ .Values.parabolDeployment.env.host }}"
          - name: INVITATION_SHORTLINK
            value: "{{ .Values.parabolDeployment.env.invitationShortlink }}"
          - name: PROTO
            value: "{{ .Values.parabolDeployment.env.protocol }}"
          - name: SERVER_SECRET
            value: "{{ .Values.parabolDeployment.env.serverSecret }}"
          - name: AUTH_INTERNAL_DISABLED
            value: "{{ .Values.parabolDeployment.env.authInternalDisabled }}"
          - name: AUTH_GOOGLE_DISABLED
            value: "{{ .Values.parabolDeployment.env.authGooleDisabled }}"
          - name: AUTH_MICROSOFT_DISABLED
            value: "{{ .Values.parabolDeployment.env.authMicrosoftDisabled }}"  
          - name: AUTH_SSO_DISABLED
            value: "{{ .Values.parabolDeployment.env.authSsoDisabled }}"
          - name: IS_ENTERPRISE
            value: "{{ .Values.parabolDeployment.env.isEnterprise }}"
          - name: GOOGLE_CLOUD_CLIENT_EMAIL
            value: "{{ .Values.parabolDeployment.env.googleCloudClientEmail }}"
          - name: GOOGLE_CLOUD_PRIVATE_KEY
            value: "{{ .Values.parabolDeployment.env.goocleCloudPrivateKey }}"
          - name: GOOGLE_CLOUD_PRIVATE_KEY_ID
            value: "{{ .Values.parabolDeployment.env.goocleCloudPrivateKeyId }}"
          - name: SAML_ISSUER
            value: "{{ .Values.parabolDeployment.env.samlIssuer }}"
          - name: AWS_ACCESS_KEY_ID
            value: "{{ .Values.parabolDeployment.env.awsAccessKeyId }}"
          - name: AWS_REGION
            value: "{{ .Values.parabolDeployment.env.awsRegion }}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{ .Values.parabolDeployment.env.awsSecretAccessKey }}"
          - name: AWS_S3_BUCKET
            value: "{{ .Values.parabolDeployment.env.awsS3Bucket }}"
          - name: GLOBAL_BANNER_ENABLED
            value: "{{ .Values.parabolDeployment.env.globalBannerEnabled }}"
          - name: GLOBAL_BANNER_TEXT
            value: "{{ .Values.parabolDeployment.env.globalBannerText }}"
          - name: GLOBAL_BANNER_BG_COLOR
            value: "{{ .Values.parabolDeployment.env.globalBannerBgColor }}"
          - name: GLOBAL_BANNER_COLOR
            value: "{{ .Values.parabolDeployment.env.globalBannerColor }}"
          - name: MAIL_PROVIDER
            value: "{{ .Values.parabolDeployment.env.mailProvider }}"
          - name: MAIL_FROM
            value: "{{ .Values.parabolDeployment.env.mailFrom }}"
          - name: MAIL_SMTP_HOST
            value: "{{ .Values.parabolDeployment.env.mailSmtpHost }}"
          - name: MAIL_SMTP_PORT
            value: "{{ .Values.parabolDeployment.env.mailSmtpPort }}"
          - name: MAIL_SMTP_USER
            value: "{{ .Values.parabolDeployment.env.mailSmtpUser }}"
          - name: MAIL_SMTP_PASSWORD
            value: "{{ .Values.parabolDeployment.env.mailSmtpPassword }}"
          - name: MAIL_SMTP_USE_TLS
            value: "{{ .Values.parabolDeployment.env.mailSmtpUseTls }}"
          - name: MAIL_SMTP_CIPHERS
            value: "{{ .Values.parabolDeployment.env.mailsmtpCiphers }}"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        {{- if .Values.services.chronos.localStorage.enabled }} 
        volumeMounts:
          - name: parabol-chronos-volume
            mountPath: /home/node/parabol/self-hosted
            subPath: self-hosted
        {{- end }}        
        resources:
            {{- toYaml .Values.services.chronos.resources | nindent 12 }}
        ports:
        {{- if .Values.services.chronos.livenessProbe }}
        livenessProbe:
          {{- toYaml .Values.services.chronos.livenessProbe | nindent 12 }}
        {{- end }}
        {{- if .Values.services.chronos.readinessProbe }}
        readinessProbe:
        {{- toYaml .Values.services.chronos.readinessProbe | nindent 12 }}
        {{- end }}
        {{- if .Values.services.chronos.livenessProbe }}
        startupProbe:
          {{- toYaml .Values.services.chronos.startupProbe | nindent 12 }}
        {{- end }}    
  
      {{- with .Values.global.imageRegistry.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.chronos.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.chronos.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.chronos.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.services.chronos.localStorage.enabled }}
      volumes:
      - name: ephemeral-disk
        ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteOnce" ]
                resources:
                  requests:
                    storage: {{ .Values.services.chronos.localStorage.storage }}
      {{- end }}
{{- end }}      
