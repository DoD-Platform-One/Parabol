{{- if .Values.services.postgres.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  POSTGRES_DB: parabol
  POSTGRES_PASSWORD: parabol
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        {{- if .Values.monitoring.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9817"
        {{ end }}    
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
      containers:
      - name: postgres
        image: "{{ .Values.global.imageRegistry.host }}/{{ .Values.services.postgres.image }}"
        ports:
          - containerPort: 5432
            name: postgres-port
        readinessProbe:
          exec:
            command: ["psql", "postgresql://postgres:parabol@localhost:5432/parabol?sslmode=disable", "-c", "SELECT 1"]
          initialDelaySeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          exec:
            command: ["psql", "postgresql://postgres:parabol@localhost:5432/parabol?sslmode=disable", "-c", "SELECT 1"]
          initialDelaySeconds: 45
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1  
        env:
          - name: POSTGRES_DB
            value: "{{ .Values.database.env.postgresDb }}"
          - name: POSTGRES_PASSWORD
            value: "{{ .Values.database.env.postgresPassword }}"
          - name: POSTGRES_USER
            value: "{{ .Values.database.env.postgresUser }}"
          - name: POSTGRES_HOST
            value: "{{ .Values.database.env.postgresHost }}"
          - name: POSTGRES_PORT
            value: "{{ .Values.database.env.postgresPort }}"  
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        {{- if .Values.services.postgres.localStorage.enabled }}  
        volumeMounts:
          - name: postgres-data
            mountPath: "/var/lib/postgresql/data"
            readOnly: false
        {{ end }}    
        {{- if .Values.services.postgres.backups.enabled }}    
          - name: postgres-backup
            mountPath: /backup  
        {{ end }}
        resources:
            {{- toYaml .Values.services.postgres.resources | nindent 12 }}    
      {{- if .Values.monitoring.enabled }}    
      - name: postgres-exporter
        image: "{{ .Values.global.imageRegistry.host }}/{{ .Values.services.postgres.exporter }}"
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: {{ .Values.monitoring.postgres.metricsPort }}
        env:
          - name: POSTGRES_DB
            value: "{{ .Values.database.env.postgresDb }}"
          - name: POSTGRES_PASSWORD
            value: "{{ .Values.database.env.postgresPassword }}"
      {{ end }}    
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.services.postgres.localStorage.enabled }}
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
      {{ end }}    
      {{- if .Values.services.postgres.backups.enabled }}    
      - name: postgres-backup
        persistentVolumeClaim:
          claimName: postgres-backup    
      {{ end }} 
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:  
    app.kubernetes.io/part-of: parabol   
spec:
  type: ClusterIP
  ports:
  - name: postgres-port
    port: 5432
    targetPort: 5432
  {{- if .Values.monitoring.enabled }}   
  - name: metrics
    port: {{ .Values.monitoring.postgres.metricsPort }}
    targetPort: {{ .Values.monitoring.postgres.metricsPort }}
  {{ end }}  
  selector:
    app: postgres
---
{{- if .Values.services.postgres.localStorage.enabled }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
{{ end }}
---
{{- if .Values.services.postgres.backups.enabled }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.services.postgres.localStorage.volumeSize }}
{{ end }}
{{ end }} 
