global:
  imageRegistry:
    # -- Container registry hostname
    host: registry1.dso.mil
    # -- Create imagepullsecret with deployment template (must use dockerconfigjson for auth credentials)
    createSecret: false
    # -- Secret needed to pull images from registry (must be created in namespace prior or enabled above)
    ## imagePullSecrets:
    ##   - name: mySecretName
    imagePullSecrets:
    - name: regcred

registryCredentials:
  # -- Username / password auth container registry
  username:
  password:


services:
  redis:
    # -- Image to use for deploying Redis
    image: ironbank/opensource/redis/redis6-alpine:6.2.14
    # -- Image to use for deploying Redis exporter for monitoring
    exporter: ironbank/bitnami/analytics/redis-exporter:v1.54.0
    # -- resource requests and limits
    resources: {}
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []
    # -- Pod annotations
    annotations: {}
    # -- securityContext settings
    fsGroup: 1000
    runAsUser: 999
    runAsGroup: 1000
    runAsNonRoot: true
    allowPrivilegeEscalation: false

  postgres:
    # -- Deploy Postgres pods - Disable if using external postgres instance
    enabled: true
    # -- Image to use for deploying PostgreSql
    image: ironbank/opensource/postgres/postgresql:16.2
    # -- Image to use for deploying Postgres exporter for monitoring
    exporter: ironbank/opensource/prometheus/postgres-exporter:v0.13.2
    localStorage:
      # -- Use PersistentVolumeClaim for Postgres storage
      enabled: true
      # -- Size of PVC volume used
      volumeSize: 10Gi
    backups:
      # -- Enable automatic backups
      enabled: false
      # -- Schedule for backup jobs
      # example - run every day at 3am
      schedule: 0 2 * * *
      # -- Size of PVC volume used
      volumeSize: 10Gi
      # -- Enable restore job from last backup
      restore: false
    # -- Container resource requests and limits
    resources: {}
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []
    # -- Pod annotations
    annotations: {}
    # traffic.sidecar.istio.io/excludeOutboundPorts: "28015,6379,9121,5432,9187,8080,29015,3000"

  parabol:
    # -- Image to use for deploying Parabol
    image: ironbank/parabol/parabol:10.3.3
    # -- Determines if there is a default IDP configure change to true to enable
    defaultIDP: false
    # -- This is the unique ID for the SAML entry in DB
    idp_stub: "bigbang"
    # -- IDP URL from SAML SP
    idp_url: "https://fqdn.to.idp.dev.bigbang.mil"
    # -- Parabol hostname
    idp_host: "parabol.dev.bigbang.mil"
    # -- Parabol graphql endpoint
    ffGqlEndpoint: "https://parabol.dev.bigbang.mil/intranet-graphql"
    # -- Determines if usage stats/insights is enabled, change to true to enable
    ffInsights: false
    # -- Parabol long lived token that is generated from server secret
    ffInsightsToken: "your_long_lived_token"
    # -- Parabol user emails that can view usuage stats/insights
    ffInsightsEmailsDb: "admin@parabol.dev.bigbang.mil"
    # -- Parabol domains to be whitelisted for usage stats/insights
    ffInsightsDomain: "parabol.dev.bigbang.mil"
    # -- Number of replicas to deploy
    replicas: 1
    env:
      # -- Parabol config to reach Redis
      redisHost: "redis-service"
      # -- Parabol config to reach Postgresql
      postgresHost: "postgres-service"
    ports:
      # -- Exposed port for Parabol to run internal to cluster
      internal: 3000
      # -- Exposed port for Parabol to run external to cluster
      external: 80

    localStorage:
      # -- Attach volume for local storage
      enabled: true
      #-- Use AWS EBS volume
      awsEbs: true
      # -- Size of PVC volume used
      storage: 5Gi
      # -- Storage Class used (efs-sc, local-path)
      storageClassName: efs-sc
      accessModes:
      - ReadWriteMany
      # -- CSI Driver
      driver: efs.csi.aws.com
      efsId: "example"

    # -- Container resource requests and limits
    resources:
      limits:
        memory: 3Gi
      requests:
        cpu: 1000m
        memory: 3Gi
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []
    # -- Pod annotations
    annotations: {}
    # traffic.sidecar.istio.io/excludeOutboundPorts: "28015,6379,9121,5432,9187,8080,29015,3000"

    # -- Enable gql restart cronjob
    cronjob: false

    livenessProbe: []
    # initialDelaySeconds: 90
    # periodSeconds: 30
    # timeoutSeconds: 60
    # failureThreshold: 3
    # successThreshold: 1
    # httpGet:
    #   path: /manifest.json
    #   port: 3000
    readinessProbe:
      # -- Delay before checking for readiness
      initialDelaySeconds: 30
      # -- The amount of time to check for
      periodSeconds: 10
      # -- How long before the check timesout
      timeoutSeconds: 1
      # -- How many time should the check fail before restarting
      failureThreshold: 3
      # -- How many successes should the check have before ready
      successThreshold: 1
      httpGet:
        # -- Path to HTTP check
        path: /ready
        # -- Port for HTTP check
        port: 3000
    startupProbe: []

database:
  env:
    # -- Name of the PostgreSQL database.
    postgresDb: parabol

    # -- Username to access the PostgreSQL database.
    postgresUser: postgres

    # -- Internal hostname used to access the PostgreSQL database.
    postgresHost: postgres-service.parabol.svc.cluster.local

    # -- Port on which the PostgreSQL server is listening.
    postgresPort: 5432

    # -- Password to access the PostgreSQL database.
    postgresPassword: parabol

ingress:
  # -- Enables external routing to Parabol service via Istio
  enabled: true
  # -- Create additional istio gateway resource if needed
  gateway:
    create: false
  # -- The external hostname for Parabol application
  hostname: parabol.dev.bigbang.mil
  # -- Istio gateway that should be used for routing
  # ex. gateways:
  #       - istio-system/public
  gateways:
  - istio-system/public

parabolDeployment:
  env:
    # -- fileStoreProvider: Specifies the provider for file storage - local | s3
    fileStoreProvider: local

    # -- Base url for static assets
    cdnBaseUrl: ''

    # -- The port on which the application will be exposed.
    port: 3000

    # -- Websocket port for Pages support
    hocusPocusPort: 3003

    # -- The external hostname for Parabol application
    host: parabol.dev.bigbang.mil

    # -- The protocol used by the server ("http" or "https").
    protocol: https

    # -- The secret key used to generate JWT tokens
    serverSecret: QmtzUGVRUXJSa1hoRHJ1Z3pRRGc1TncK

    # -- The base URL used to construct invitation shortlinks.
    invitationShortlink: parabol.dev.bigbang.mil/invitation-link

    # -- The URL used to access the Redis server.
    redisUrl: redis://redis-service.parabol.svc.cluster.local:6379

    # -- Flag indicating if internal username/password authentication is disabled ("true" or "false").
    authInternalDisabled: false

    # -- Flag indicating if Google authentication is disabled ("true" or "false").
    authGooleDisabled: true

    # -- Flag indicating if Microsoft authentication is disabled ("true" or "false").
    authMicrosoftDisabled: true

    # -- Flag indicating if Single Sign-On (SSO) authentication is disabled ("true" or "false").
    authSsoDisabled: false

    # -- Flag indicating if the default tier for the instance is Enterprise. Use this for privately managed instances to make all new orgs, teams, and users enterprise tier. This flag is implemented in 7.2.0 or greater.
    isEnterprise: true

    # -- Google Service Account Email (optional variable if Google services are used)
    googleCloudClientEmail: key_GOOGLE_CLOUD_CLIENT_EMAIL

    # -- Google Service Account Private key (optional variable for use with GCP service account credential)
    goocleCloudPrivateKey: key_GOOGLE_CLOUD_PRIVATE_KEY

    # -- Google Private Key ID (optional variable for use with GCP service account credential)
    goocleCloudPrivateKeyId: key_GOOGLE_CLOUD_PRIVATE_KEY_ID

    # -- SAML Issuer (Override default issuer client with this value)
    samlIssuer: ""
    
    # -- gif image provider ( tenor, gifabol, empty string to hide gif search)
    gifProvider: 'tenor'
    
    # -- Tenor API key for gif search
    tenorSecret: ''

    # -- AWS S3 configuration for static assets
    awsAccessKeyId: key_AWS_ACCESS_KEY_ID
    awsRegion: key_AWS_REGION
    awsSecretAccessKey: key_AWS_SECRET_ACCESS_KEY
    awsS3Bucket: BUCKET_NAME

    # -- CUI Banner configuration
    globalBannerEnabled: 'true'
    globalBannerText: 'UNCLASSIFIED NOT APPROVED FOR CUI (IL-2)'
    globalBannerColor: '#FFFFFF'
    globalBannerBgColor: '#007a33'

    # -- SMTP configuration
    mailProvider: 'smtp'
    mailFrom: 'key_MAIL_FROM'
    mailSmtpHost: 'key_MAIL_SMTP_HOST'
    mailSmtpPort: '587'
    mailSmtpUser: 'key_MAIL_SMTP_USER'
    mailSmtpPassword: 'key_MAIL_SMTP_PASSWORD'
    mailSmtpUseTls: '1' # set to '0' for false
    mailsmtpCiphers: 'HIGH:MEDIUM:!aNULL:!eNULL:@STRENGTH:!DH:!kEDH'

    # -- Chronos configuration
    chronosScheduleJobs: '0 */10 * * * *'
    chronosUpdateTokens: '0 0 0 1,15 * *'
    chronosProcessRecurrence: '0 */5 * * * *'
    chronosAutoPause: '0 0 5 * * *'
    chronosBatchEmails: '0 0 10 * * *'

    # -- Mattermost Plugin integration
    mattermost:
      # -- Create mattermost plugin secret
      enabled: true
      # -- Mattermost instance URL
      instanceUrl: 'https://mattermost.example.com'
      # -- Mattermost plugin secret
      mattermostSecret: 'MATTERMOST_SECRET'
      


monitoring:
  # -- Enable BigBang Monitoring resources
  enabled: true
  dashboards:
    # -- K8s namespace where the monitoring stack is deployed
    namespace: monitoring
    # -- Grafana dashboard labels to check
    label: grafana_dashboard

  redis:
    # -- Port that Redis metrics are exposed on
    metricsPort: 9121

  postgres:
    # -- Port that Postgres metrics are exposed on
    metricsPort: 9187
    env:
    # -- Postgres exporter env vars
    - name: DATA_SOURCE_NAME
      value: postgresql://postgres:parabol@localhost:5432/parabol?sslmode=disable
