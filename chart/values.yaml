global:
  imageRegistry:
    # -- Container registry hostname
    host: registry1.dso.mil
    # -- Create imagepullsecret with deployment template (must use dockerconfigjson for auth credentials)
    createSecret: false
    # -- Secret needed to pull images from registry (must be created in namespace prior or enabled above)
    ## imagePullSecrets:
    ##   - name: mySecretName
    imagePullSecrets: []

registryCredentials:
  # -- Username / password auth container registry
  username:
  password:

services:
  redis:
    # -- Image to use for deploying Redis
    image: ironbank/opensource/redis/redis6-alpine:6.2.14
    # -- Image to use for deploying Redis exporter for monitoring
    exporter: ironbank/bitnami/analytics/redis-exporter:v1.54.0
    # -- Use PersistentVolumeClaim for Redis storage
    localStorage:
      enabled: true
      # -- Size of PVC volume used
      volumeSize: 1Gi
    # -- resource requests and limits
    resources: {}
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []
    # -- securityContext settings
    runAsUser: 999
    runAsGroup: 1000
    runAsNonRoot: true
    allowPrivilegeEscalation: false

  rethinkdb:
    # -- Image to use for deploying ReThinkDB
    image: ironbank/opensource/rethinkdb/rethinkdb:2.4.1.u1
    localStorage:
      # -- Use PersistentVolumeClaim for RethinkDB storage
      enabled: true
      # -- Size of PVC volume used
      volumeSize: 10Gi
    backups:
      # -- Enable automatic backups
      enabled: false
      # -- Schedule for backup jobs
      # example - run every day at 3am
      schedule: 0 3 * * *
      # -- Size of PVC volume used
      volumeSize: 10Gi
      # -- Enable restore job from last backup
      restore: false
    # -- Container resource requests and limits
    resources: {}
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []

  postgres:
    # -- Deploy Postgres pods - Disable if using external postgres instance
    enabled: true
    # -- Image to use for deploying PostgreSql
    image: ironbank/opensource/postgres/postgresql:15.4
    # -- Image to use for deploying Postgres exporter for monitoring
    exporter: ironbank/opensource/prometheus/postgres-exporter:v0.13.2
    localStorage:
      # -- Use PersistentVolumeClaim for RethinkDB storage
      enabled: true
      # -- Size of PVC volume used
      volumeSize: 10Gi
    backups:
      # -- Enable automatic backups
      enabled: false
      # -- Schedule for backup jobs
      # example - run every day at 3am
      schedule: 0 2 * * *
      # -- Size of PVC volume used
      volumeSize: 10Gi
      # -- Enable restore job from last backup
      restore: false
    # -- Container resource requests and limits
    resources: {}
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []

  parabol:
    # -- Image to use for deploying Parabol
    image: ironbank/parabol/parabol:7.11.0
    # -- Determines if there is a default IDP configure change to true to enable
    defaultIDP: false
    # -- RethinkDB host
    rethinkDbHost: "rethinkdb-service.parabol.svc.cluster.local"
    # -- RethinkDB port
    rethinkDbPort: "28015"
    # -- RethinkDB database name
    rethinkDb: "actionDevelopment"
    # -- This is the unique ID for the SAML entry in RethinkDB
    idp_stub: "bigbang"
    # -- IDP URL from SAML SP
    idp_url: "https://fqdn.to.idp.bigbang.dev"
    # -- Parabol hostname
    idp_host: "parabol.bigbang.dev"
    # -- Parabol graphql endpoint
    ffGqlEndpoint: "https://parabol.bigbang.dev/intranet-graphql"
    # -- Determines if usage stats/insights is enabled, change to true to enable
    ffInsights: false
    # -- Parabol long lived token that is generated from server secret
    ffInsightsToken: "your_long_lived_token"
    # -- Parabol user emails that can view usuage stats/insights
    rethinkffInsightsEmailsDb: "admin@parabol.bigbang.dev"
    # -- Parabol domains to be whitelisted for usage stats/insights
    ffInsightsDomain: "parabol.bigbang.dev"
    # -- Service name for Stateful Set
    serviceName: "parabol-stateful-set"
    # -- Number of replicas to deploy
    replicas: 1
    env:
      # -- Parabol config to reach Redis
      redisHost: "redis-service"
      # -- Parabol config to reach RethinkDB
      rethinkdbHost: "rethinkdb-service"
      # -- Parabol config to reach Postgresql
      postgresHost: "postgres-service"
    ports:
      # -- Exposed port for Parabol to run internal to cluster
      internal: 3000
      # -- Exposed port for Parabol to run external to cluster
      external: 80
    localStorage:
      # -- Use PersistentVolumeClaim for RethinkDB storage
      enabled: true
      # -- Size of PVC volume used
      volumeSize: 1Gi
    # -- Container resource requests and limits
    resources: {}
    # -- Pod spec for adding node constraints
    nodeSelector: {}
    affinity: {}
    tolerations: []

database:
  env:
    # -- Name of the PostgreSQL database.
    postgresDb: parabol

    # -- Username to access the PostgreSQL database.
    postgresUser: postgres

    # -- Internal hostname used to access the PostgreSQL database.
    postgresHost: postgres-service.parabol.svc.cluster.local

    # -- Port on which the PostgreSQL server is listening.
    postgresPort: 5432

    # -- Password to access the PostgreSQL database.
    postgresPassword: parabol

ingress:
  # -- Enables external routing to Parabol service via Istio
  enabled: true
  # -- Create additional istio gateway resource if needed
  gateway:
    create: false
  # -- The external hostname for Parabol application
  hostname: parabol.bigbang.dev
  # -- Istio gateway that should be used for routing
  # ex. gateways:
  #       - istio-system/public
  gateways: []

parabolDeployment:
  env:
    # -- fileStoreProvider: Specifies the provider for file storage - "local" means local file-based storage is used
    fileStoreProvider: local

    # -- The port on which the application will be exposed.
    port: 3000

    # -- The external hostname for Parabol application
    host: parabol.bigbang.dev

    # -- The protocol used by the server ("http" or "https").
    protocol: http

    # -- Identifier for the server (useful in scaled/multi-server environments).
    serverId: 1

    # -- The secret key used to generate JWT tokens
    serverSecret: QmtzUGVRUXJSa1hoRHJ1Z3pRRGc1TncK

    # -- The base URL used to construct invitation shortlinks.
    invitationShortlink: parabol.bigbang.dev/invitation-link

    # -- The URL used to access the Redis server.
    redisUrl: redis://redis-service.parabol.svc.cluster.local:6379

    # -- The URL used to access the RethinkDB server.
    rethinkdbUrl: rethinkdb://rethinkdb-service.parabol.svc.cluster.local:28015/actionDevelopment

    # -- Flag indicating if internal username/password authentication is disabled ("true" or "false").
    authInternalDisabled: false

    # -- Flag indicating if Google authentication is disabled ("true" or "false").
    authGooleDisabled: true

    # -- Flag indicating if Microsoft authentication is disabled ("true" or "false").
    authMicrosoftDisabled: true

    # -- Flag indicating if Single Sign-On (SSO) authentication is disabled ("true" or "false").
    authSsoDisabled: false

    # -- Flag indicating if the default tier for the instance is Enterprise. Use this for privately managed instances to make all new orgs, teams, and users enterprise tier. This flag is implemented in 7.2.0 or greater.
    isEnterprise: true

    # -- Google Service Account Email (optional variable if Google services are used)
    googleCloudClientEmail: key_GOOGLE_CLOUD_CLIENT_EMAIL

    # -- Google Service Account Private key (optional variable for use with GCP service account credential)
    goocleCloudPrivateKey: key_GOOGLE_CLOUD_PRIVATE_KEY

    # -- Google Private Key ID (optional variable for use with GCP service account credential)
    goocleCloudPrivateKeyId: key_GOOGLE_CLOUD_PRIVATE_KEY_ID

  livenessProbe:
    []
    # initialDelaySeconds: 90
    # periodSeconds: 30
    # timeoutSeconds: 60
    # failureThreshold: 3
    # successThreshold: 1
    # httpGet:
    #   path: /manifest.json
    #   port: 3000
  readinessProbe:
    # -- Delay before checking for readiness
    initialDelaySeconds: 30
    # -- The amount of time to check for
    periodSeconds: 10
    # -- How long before the check timesout
    timeoutSeconds: 5
    # -- How many time should the check fail before restarting
    failureThreshold: 3
    # -- How many successes should the check have before ready
    successThreshold: 1
    httpGet:
      # -- Path to HTTP check
      path: /manifest.json
      # -- Port for HTTP check
      port: 3000
  startupProbe:
    # -- The amount of time to check for
    periodSeconds: 30
    # -- How many time should the check fail before restarting
    failureThreshold: 3
    httpGet:
      # -- Path to HTTP check
      path: /manifest.json
      # -- Port for HTTP check
      port: 3000

monitoring:
  # -- Enable BigBang Monitoring resources
  enabled: true
  dashboards:
    # -- K8s namespace where the monitoring stack is deployed
    namespace: monitoring
    # -- Grafana dashboard labels to check
    label: grafana_dashboard

  redis:
    # -- Port that Redis metrics are exposed on
    metricsPort: 9121

  postgres:
    # -- Port that Postgres metrics are exposed on
    metricsPort: 9187
    env:
      # -- Postgres exporter env vars
      - name: DATA_SOURCE_NAME
        value: postgresql://postgres:parabol@localhost:5432/parabol?sslmode=disable
